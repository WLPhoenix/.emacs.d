from .subworkflows import prep_dataset, prep_synthesys, start_services, manage_kb
from .subworkflows import run_advanced_analytics, prep_queries, shutdown

from qatp_core.qatp.decorators import doc_inherit
from qatp_core.qatp.tasks import QATPWorkflow


class HBaseBatch(QATPWorkflow):

    NAME = 'ingest.hbase_batch'


    @doc_inherit
    def get_required_config(self):
        return [
            {
                'artifact': {
                    'url': str
                },
                'datasets': [str],
                'schedule': str,
                'stacks': [{
                    'blueprint': str,
                    'title': str,
                    'type': str
                }],
            },
            {
                'artifact': str,
                'datasets': [str],
                'schedule': str,
                'stacks': [{
                    'blueprint': str,
                    'title': str,
                    'type': str
                }],
            }
        ]


    @doc_inherit
    def get_optional_config(self):
        return {
            'artifact': {
                'target_path': str,
                'hosts': [str]
            },
            'queries': str,
            'keepalive': bool,
            'secure': bool,
            'streaming': bool,
            'kb': {
                'name': str,
                'config': dict
            }
        }


    def _init_initial_state(self):
        self.initial_state = {
            'config': {
                'common.start_stack': self._start_stack_initial_state(),
                'ingest.run_schedule': self._run_schedule_initial_state(),
            },
            'database': 'hbase'
        }


    def _init_tasks(self):
        self.tasks = [
            'common.start_stack',
            self.subworkflow(prep_dataset.PrepDataset),
            self.subworkflow(prep_synthesys.PrepSynthesys),
            self.subworkflow(start_services.StartServices),
            self.subworkflow(manage_kb.ManageKB),
            'ingest.run_schedule',
            self.subworkflow(prep_queries.PrepQueries),
            self.subworkflow(shutdown.ShutDown),
        ]
        self.clean_tasks()


    def _start_stack_initial_state(self):
        return {'stacks': self.config['stacks']}


    def _run_schedule_initial_state(self):
        return {'schedule': self.config['schedule']}

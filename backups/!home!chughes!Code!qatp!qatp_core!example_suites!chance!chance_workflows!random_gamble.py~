from __future__ import division

import copy, traceback

from qatp_core.qatp.tasks import QATPWorkflow
from qatp_core.qatp.exceptions import InvalidConfigException
from qatp_core.qatp.log import con_log

from qatp_core.common_suites.common import common_tasks
from .. import chance_tasks


class RandomGamble(QATPWorkflow):
    _name = 'chance.random_gamble'
    
    def __init__(self, config, *args, **kwargs):
        QATPWorkflow.__init__(self, config=config, *args, **kwargs)
        print config
        self.initial_state = {}
        try:
            self.tasks = [
                self._define_dice(),
                self._define_coins(),
                self._define_test(),
            ]                    
        except KeyError, e:
            raise InvalidConfigException("Missing config property for workflow '%s': %s" % (self.get_name(), e))
                                        
    def get_name(self):
        return RandomGamble._name

    def get_initial_state(self):
        return {'taco':'loco'}

    def _define_dice(self):
        dice_config = {
            'die_faces' : self.config['die_face'],
            'count' : self.config['dice_count']
        }
        def dice_after(task, *args, **kwargs):
            dice_state = task.state.setdefault('dice',{})
            task.state['dice']['result'] = task.result
            
        dice = chance_tasks.get_task('chance.dice')(config=dice_config, after=dice_after)
        return dice
        
    def _define_coins(self):
        coins_config = {
            'count' : self.config['coins_count']
        }
        
        def coins_after(task, *args, **kwargs):
            coins_state = task.state.setdefault('coins',{})
            task.state['coins']['result'] = task.result
            
        coins = chance_tasks.get_task('chance.coins')(config=coins_config, after=coins_after)
        return coins

    def _define_test(self):
        # This is just some arbitrary test function
        def func(state, *args, **kwargs):
            dice_result = state['dice']['result']

            even_sum = sum([dice_result[k] for k in dice_result if k%2==0])
            total_sum = sum([dice_result[k] for k in dice_result])
            dice_ratio = even_sum / total_sum
            con_log().debug("Dice ratio: %s / %s = %s" % (even_sum, total_sum, dice_ratio))
            
            coins_result = state['coins']['result']
            coins_ratio = coins_result['heads'] / (coins_result['heads'] + coins_result['tails'])
            con_log().debug("Heads percent: %s / %s = %s" % (even_sum, total_sum, coins_ratio))
            con_log().debug("Is dice_ratio > coins_ratio?")
            return dice_ratio > coins_ratio
                                
        test_config = {
            'test' : func
        }
        def test_after(task, *args, **kwargs):
            con_log().info("Dice: %s" % str(task.state['dice']['result']))
            con_log().info("Coins: %s" % str(task.state['coins']['result']))
            con_log().info("Pass: %s" % str(task.result))
        
        test = common_tasks.get_task('common.test')(config=test_config, after=test_after)
        return test


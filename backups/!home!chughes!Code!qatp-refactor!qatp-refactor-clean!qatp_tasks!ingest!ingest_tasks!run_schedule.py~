from .helpers import synic
from qatp_core.qatp.tasks import QATPTask


class RunRivulet(QATPTask):
    _name = 'ingest.run_rivulet'

    def get_name(self):
        return RunRivulet._name

    def get_required_config(self):
        return [{}]

    def get_optional_config(self):
        return {
            'input_data': str
        }

    def get_expected_state(self):
        return {
            'synthesys': {
                'cdh_version': int,
                'kb': {
                    'name': str
                },
                'synic': {
                    'url': str
                }
            }
        }

    def task(self):
        run_id = self.state['run_id']
        synic_url = self.state['synthesys']['synic']['url']
        keyspace = self.state['synthesys']['kb']['name']
        cdh_version = self.state['synthesys'].get('cdh_version',
                                                  synic.DEFAULT_CDH_VERSION)

        config_state = self.get_config_state({})
        if config_state.get('input_data'):
            config = {"input_rawText": "%s" % config_state['input_data']}
        else:
            config = {"input_rawText": "/drsi/%s_data" % run_id}

        config["skipCleanupData"] = config_state.get('skip_synic_cleanup', True)
        synic.run_synic_task(synic_url, keyspace, "rivulet", config, cdh_version)

    def cleanup(self):
        pass
